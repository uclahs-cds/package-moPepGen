"""Main entry point"""
import argparse
from moPepGen.vep.__main__ import parse_vep
from moPepGen.svgraph.__main__ import call_variant_peptides


def main():
    """ Main entry point """
    parser = argparse.ArgumentParser(
        prog='moPopGen'
    )
    subparsers = parser.add_subparsers()

    ## parseVEP
    parser_parse_vep = subparsers.add_parser(
        name='parseVEP',
        help='Parse VEP output for moPepGen to call variant peptides.',
        description="Parse VEP output tsv to a BED-like format of variant"
        "information for moPepGen to call variant peptides. The genome"
        "assembly FASTA and annotation GTF must come from the same"
        "GENCODE/ENSEMBL version, and must the consistent with the VEP output."
    )

    parser_parse_vep.add_argument(
        '-v', '--vep-txt',
        type=str,
        nargs='+',
        help='Path to VEP result txt file.',
        metavar=''
    )
    parser_parse_vep.add_argument(
        '-g', '--genome-fasta',
        type=str,
        help='Path to the genome assembly FASTA file.',
        metavar=''
    )
    parser_parse_vep.add_argument(
        '-a', '--annotation-gtf',
        type=str,
        help='Path to the annotation GTF file. Must come from ENSEMBL/GENCODE'
        ' with the same version of the genome and protein FASTA.',
        metavar=''
    )
    parser_parse_vep.add_argument(
        '-o', '--output-prefix',
        type=str,
        help='The output prefix.',
        metavar='Prefix to the output filename.'
    )
    parser_parse_vep.add_argument(
        '--verbose',
        type=bool,
        help='Print out logging messages. Defaults to True',
        default=True
    )
    
    parser_parse_vep.set_defaults(func=parse_vep)

    # callPeptides
    parser_call_peptide = subparsers.add_parser(
        name='callPeptide',
        help='Call non-carnonical peptides from genomic variants.',
        description="Genomic variant data must be generated by one of the"
        "moPepGen parser. See moPepGen --help"
    )

    parser_call_peptide.add_argument(
        '-i', '--input-variants',
        type=str,
        nargs='+',
        help='Path to input variant files. Must be generated by any of the'
        'moPepGen parser. This can be multiple.',
        metavar=''
    )
    parser_call_peptide.add_argument(
        '-g', '--genome-fasta',
        type=str,
        help='Path to the genome assembly FASTA file.',
        metavar=''
    )
    parser_call_peptide.add_argument(
        '-a', '--annotation-gtf',
        type=str,
        help='Path to the annotation GTF file. Must come from ENSEMBL/GENCODE'
        ' with the same version of the genome and protein FASTA.',
        metavar=''
    )
    parser_call_peptide.add_argument(
        '-p', '--proteome-fasta',
        type=str,
        help='Path to the translated protein sequence FASTA file. Must come'
        'from ENSEMBL/GENCODE with the same version of the genome FASTA.',
        metavar=''
    )
    parser_call_peptide.add_argument(
        '-o', '--output-fasta',
        type=str,
        help='Filename for the output FASTA.',
        metavar=''
    )
    parser_call_peptide.add_argument(
        '-c', '--cleavage-rule',
        type=str,
        help='Cleavage rule. Defaults to trypsin.',
        default='trypsin',
        metavar=''
    )
    parser_call_peptide.add_argument(
        '-m', '--miscleavage',
        type=int,
        help='Number of cleavages to allow.',
        metavar=''
    )
    parser_call_peptide.add_argument(
        '-w', '--min-mw',
        type=float,
        help='The minimal molecular weight of the non-carnonical peptides.'
        'Defaults to 500',
        default=500.,
        metavar=''
    )
    parser_call_peptide.add_argument(
        '-v', '--verbose',
        type=bool,
        help='Verbose',
        metavar='',
        default=True
    )

    parser_call_peptide.set_defaults(func=call_variant_peptides)

    args = parser.parse_args()

    args.func(args)


if __name__ == '__main__':
    main()