"""CLI shim for callVariant: delegates to the orchestrator while preserving the public CLI."""
from __future__ import annotations
import argparse
from pathlib import Path
from moPepGen.cli import common
from moPepGen import params
from moPepGen.pipeline.orchestrator import CallVariantOrchestrator

INPUT_FILE_FORMATS = ['.gvf']
OUTPUT_FILE_FORMATS = ['.fasta', '.fa']


def add_subparser_call_variant(subparsers: argparse._SubParsersAction):
    """Register the callVariant subcommand and its arguments."""
    p: argparse.ArgumentParser = subparsers.add_parser(
        name='callVariant',
        help='Call non-canonical peptides from genomic variants.',
        description='Genomic variant data must be generated by one of the moPepGen'
            'parsers. See moPepGen --help',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    common.add_args_input_path(
        parser=p,
        formats=INPUT_FILE_FORMATS,
        plural=True,
        required=True,
        message='File path to GVF files. Must be generated by any of the moPepGen parsers.'
    )
    common.add_args_output_path(p, OUTPUT_FILE_FORMATS)
    p.add_argument(
        '--graph-output-dir',
        type=Path,
        required=False,
        default=None,
        help='Directory path that graph data are saved to. Graph data are not saved '
            'if this is not given.',
        metavar='<file>'
    )
    p.add_argument(
        '--max-adjacent-as-mnv',
        type=int,
        help='Max number of adjacent variants that should be merged.',
        default=2
    )
    p.add_argument(
        '--selenocysteine-termination',
        action='store_true',
        help='Include peptides of selenoproteins that the UGA is treated as termination '
            'instead of Sec.'
    )
    p.add_argument(
        '--w2f-reassignment',
        action='store_true',
        help='Include peptides with W > F (Tryptophan to Phenylalanine) reassignment.'
    )
    p.add_argument(
        '--backsplicing-only',
        action='store_true',
        help='For circRNA, only keep noncanonical peptides spaning the backsplicing site.'
    )
    p.add_argument(
        '--coding-novel-orf',
        action='store_true',
        help='Find alternative start site for coding transcripts.'
    )
    p.add_argument(
        '--max-variants-per-node',
        type=int,
        help='Maximal number of variants per node. Useful when local regions are '
            'heavily mutated. When creating the cleavage graph, nodes containing '
            'variants larger than this value are skipped. Set -1 to disable.',
        default=[7],
        nargs='+',
        metavar='<number>'
    )
    p.add_argument(
        '--additional-variants-per-misc',
        type=int,
        help='Additional variants allowed for every miscleavage. Used with '
            '--max-variants-per-node to handle hypermutated regions. Set -1 to disable.',
        default=[2],
        nargs='+',
        metavar='<number>'
    )
    p.add_argument(
        '--in-bubble-cap-step-down',
        type=int,
        default=0,
        metavar='<number>',
        help='Default step down for in-bubble variant caps.'
    )
    p.add_argument(
        '--min-nodes-to-collapse',
        type=int,
        help='When making the cleavage graph, the minimal number of nodes to trigger '
            'pop collapse.',
        default=30,
        metavar='<number>'
    )
    p.add_argument(
        '--naa-to-collapse',
        type=int,
        help='The number of bases used for pop collapse.',
        default=5,
        metavar='<number>'
    )
    p.add_argument(
        '--noncanonical-transcripts',
        action='store_true',
        help='Process only noncanonical transcripts of fusion transcripts and circRNA. '
            'Canonical transcripts are skipped.'
    )
    p.add_argument(
        '--timeout-seconds',
        type=int,
        default=1800,
        help='Timeout in seconds for each transcript.'
    )
    p.add_argument(
        '--threads',
        type=int,
        help='Set number of worker processes to use.',
        default=1,
        metavar='<number>'
    )
    common.add_args_skip_failed(p)
    common.add_args_reference(p)
    common.add_args_cleavage(p)
    common.add_args_debug_level(p)

    p.set_defaults(func=call_variant_peptide)
    common.print_help_if_missing_args(p)
    return p


def call_variant_peptide(args: argparse.Namespace) -> None:
    """Entrypoint for callVariant: delegate to the orchestrator."""
    common.print_start_message(args)

    for file in args.input_path:
        common.validate_file_format(file, ['.gvf'], check_readable=True)
    common.validate_file_format(args.output_path, ['.fasta', '.fa'], check_writable=True)
    if args.graph_output_dir is not None:
        common.validate_file_format(args.graph_output_dir, check_writable=True, is_directory=True)

    # Create cleavage params (needed for loading canonical peptides)
    cleavage_params = params.CleavageParams(
        enzyme=args.cleavage_rule,
        exception=args.cleavage_exception,
        miscleavage=int(args.miscleavage),
        min_mw=float(args.min_mw),
        min_length=args.min_length,
        max_length=args.max_length,
        max_variants_per_node=args.max_variants_per_node[0],
        additional_variants_per_misc=args.additional_variants_per_misc[0],
        in_bubble_cap_step_down=args.in_bubble_cap_step_down,
        min_nodes_to_collapse=args.min_nodes_to_collapse,
        naa_to_collapse=args.naa_to_collapse,
    )

    # Load references in the CLI layer
    reference_data = common.load_references(
        args=args,
        invalid_protein_as_noncoding=args.invalid_protein_as_noncoding,
        cleavage_params=cleavage_params,
        load_codon_tables=True,
    )

    # Pass reference_data to orchestrator (avoids circular import)
    orchestrator = CallVariantOrchestrator(args, reference_data=reference_data)
    orchestrator.run()
