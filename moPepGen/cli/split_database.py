""" Module for splitDatabase """
from __future__ import annotations
import argparse
from pathlib import Path
from typing import List
from moPepGen.aa import PeptidePoolSplitter
from .common import add_args_verbose, print_start_message, print_help_if_missing_args


# pylint: disable=W0212
def add_subparser_split_database(subparser:argparse._SubParsersAction):
    """ CLI for moPepGen splitDatabase """
    p = subparser.add_parser(
        name='splitDatabase',
        help='Split variant peptide FASTA database generated by moPepGen.',
        description='Split variant peptide FASTA database generated by'
        'moPepGen into separate files.'
    )

    p.add_argument(
        '-a', '--variant-gvf',
        type=Path,
        help='Path to the input GVF files',
        nargs='+'
    )
    p.add_argument(
        '-r', '--variant-peptides',
        type=Path,
        help='Path to the variant peptide FASTA database file.'
    )
    p.add_argument(
        '-n', '--noncoding-peptides',
        type=Path,
        help='Pth the the noncoding peptide FASTA databse file.',
        default=None
    )
    p.add_argument(
        '-d', '--order-source',
        type=str,
        help='Order of sources, separate by comma. E.g., SNP,SNV,Fusion'
    )
    p.add_argument(
        '-u', '--group-source',
        type=str,
        help='Group sources. E.g., PointMutation:gSNP,sSNV INDEL:gINDEL,sINDEL',
        nargs='*'
    )
    p.add_argument(
        '-l', '--max-source-groups',
        type=int,
        help='Maximal number of different source groups to be separate into'
        'individual database FASTA files. Defaults to 1',
        default=1
    )
    p.add_argument(
        '-s','--priority-list',
        type=str,
        help='Source groups that will be split into individual FASTA file'
        'even if the number of groups exceeds --max-source-groups.',
        default=None
    )
    p.add_argument(
        '-o', '--output-prefix',
        type=Path,
        help='Output prefix'
    )

    add_args_verbose(p)
    p.set_defaults(func=split_database)
    print_help_if_missing_args(p)

def split_database(args:argparse.Namespace) -> None:
    """ Split peptide database """
    print_start_message(args)

    source_order = {val:i for i,val in  enumerate(args.order_source.split(','))}

    group_source = {}
    for it in args.group_source:
        key, val = it.split(':')
        group_source[key] = val.split(',')

    splitter = PeptidePoolSplitter(order=source_order, group_map=group_source)
    splitter.load_database(args.variant_peptides)
    if args.noncoding_peptides:
        splitter.load_database_noncoding(args.noncoding_peptides)
    for file in args.variant_gvf:
        splitter.load_gvf(file)
    splitter.split(args.max_source_groups, args.priority_list)
    splitter.write(args.ourput_prefix)
