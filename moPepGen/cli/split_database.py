""" Module for splitDatabase """
from __future__ import annotations
import argparse
from pathlib import Path
from moPepGen.aa import PeptidePoolSplitter
from moPepGen import SPLIT_DATABASE_KEY_SEPARATER
from .common import add_args_verbose, print_start_message, print_help_if_missing_args


# pylint: disable=W0212
def add_subparser_split_database(subparser:argparse._SubParsersAction):
    """ CLI for moPepGen splitDatabase """
    p = subparser.add_parser(
        name='splitDatabase',
        help='Split variant peptide FASTA database generated by moPepGen.',
        description='Split variant peptide FASTA database generated by'
        'moPepGen into separate files.'
    )

    p.add_argument(
        '-a', '--variant-gvf',
        type=Path,
        help='Path to the input GVF files',
        nargs='+'
    )
    p.add_argument(
        '-r', '--variant-peptides',
        type=Path,
        help='Path to the variant peptide FASTA database file.'
    )
    p.add_argument(
        '-n', '--noncoding-peptides',
        type=Path,
        help='Pth the the noncoding peptide FASTA databse file.',
        default=None
    )
    p.add_argument(
        '--order-source',
        type=str,
        help='Order of sources, separate by comma. E.g., SNP,SNV,Fusion'
    )
    p.add_argument(
        '--group-source',
        type=str,
        help='Group sources. E.g., PointMutation:gSNP,sSNV INDEL:gINDEL,sINDEL',
        nargs='*'
    )
    p.add_argument(
        '--max-source-groups',
        type=int,
        help='Maximal number of different source groups to be separate into'
        'individual database FASTA files. Defaults to 1',
        default=1
    )
    p.add_argument(
        '--additional-split',
        type=str,
        help='For peptides that were not already split into FASTAs up to'
        'max_source_groups, those involving the following source will be split'
        'into additional FASTAs with decreasing priority',
        default=None
    )
    p.add_argument(
        '-o', '--output-prefix',
        type=Path,
        help='Output prefix'
    )

    add_args_verbose(p)
    p.set_defaults(func=split_database)
    print_help_if_missing_args(p)

def split_database(args:argparse.Namespace) -> None:
    """ Split peptide database """
    print_start_message(args)

    source_order = {val:i for i,val in  enumerate(args.order_source.split(','))}\
        if args.order_source else None

    group_map = None
    if args.group_source:
        group_map = {}
        for it in args.group_source:
            key, val = it.split(':')
            group_map[key] = val.split(',')

    splitter = PeptidePoolSplitter(order=source_order, group_map=group_map)

    with open(args.variant_peptides, 'rt') as handle:
        splitter.load_database(handle)

    if args.noncoding_peptides:
        with open(args.noncoding_peptides) as handle:
            splitter.load_database_noncoding(handle)

    for file in args.variant_gvf:
        with open(file, 'rt') as handle:
            splitter.load_gvf(handle)

    additional_split = args.additional_split or []
    sep = SPLIT_DATABASE_KEY_SEPARATER
    additional_split = [{x.split(sep)} for x in additional_split]
    splitter.split(args.max_source_groups, additional_split)

    splitter.write(args.output_prefix)
